// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array str;
	field int length;
	field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		let max = maxLength;
		if(maxLength=0){
			return this;
		}
		let str = Array.new(maxLength);
		let length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if(~(max=0)){
			do Memory.deAlloc(str);
		}
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		do setCharAt(length,c);
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		do setCharAt(length - 1, 0);
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int value,count;
		var boolean isNegative;
		let value = 0;
		if(charAt(0) = 45){
			let isNegative = true;
			let count = 1;
		}else{
			let isNegative = false;
			let count = 0;
		}
		while(count < length()){
			let value = value * 10 + (charAt(count) - 48);
			let count = count + 1;
		}
		if(isNegative){
			return -value;
		}
		return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		while(length > 0){
			do eraseLastChar();
		}
		if(val<0){
			do appendChar(45);
			if(val=(~32767)){
				do appendChar(51);
				do appendChar(50);
				do appendChar(55);
				do appendChar(54);
				do appendChar(56);
				return;
			}
			let val = ~val + 1;
		}
		do int2string(val);
		return;
    }
	
	method void int2string(int i){
		var int digit;
		let digit = i - (10 * (i/10));
		if(i<10){
			do appendChar(digit+48);
			return;
		}else{
			do int2string(i/10);
			do appendChar(digit+48);
		}
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
