// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static boolean color;
	static Array screen;
	static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		let color = true;
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = ~32767;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int count;
		let count = 0;
		while(count < 8192){
			let screen[count] = 0;
			let count = count + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address,value,operand;
		let address = 32*y + (x/16);
		let value = Memory.peek(16384 + address);
		let operand = twoToThe[x -(16 * (x/16))];
		if(color){
			let value = value | operand;
		}else{
			let value = value & (~operand);
		}
		do Memory.poke(16384 + address,value);
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a,b,dx,dy,diff,temp;
		var boolean flg;
		let a = 0;
		let b = 0;
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);
		let flg = true;
		if(x1>x2){
			let temp = x1;
			let x1 = x2;
			let x2 = temp;
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
		}
		if(y2<y1){
			let flg = false;
		}
		let diff = 0;
		if(dx=0){
			let y1 = Math.min(y1,y2);
			while(~(b>dy)){
				do Screen.drawPixel(x1,y1+b);
				let b = b + 1;
			}
			return;
		}
		if(dy=0){
			while(~(a>dx)){
				do Screen.drawPixel(x1+a,y1);
				let a = a + 1;
			}
			return;
		}
		while(~(a>dx) & ~(b>dy)){
			if(flg){
				do Screen.drawPixel(x1+a,y1+b);
			}else{
				do Screen.drawPixel(x1+a,y1-b);
			}
			if(diff<0){
				let a = a + 1;
				let diff = diff + dy;
			}else{
				let b = b + 1;
				let diff = diff - dx;
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int a,countA;
		let a = Math.min(y1,y2);
		let countA = Math.abs(y1 - y2);
		while(countA > -1){
			do Screen.drawLine(x1,a+countA,x2,a+countA);
			let countA = countA - 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int sqrt,dy;
		let dy = -r;
		while(dy<(r+1)){
			let sqrt = Math.sqrt(r*r-(dy*dy));
			do Screen.drawLine(x-sqrt,y+dy,x+sqrt,y+dy);
			let dy = dy + 1;
		}
		return;
    }
}
