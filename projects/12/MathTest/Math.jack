// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static Array twoToThe;
    /** Initializes the library. */
    function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = ~32767;
		return;
    }

	function boolean bit(int x,int i){
		var int temp;
		let temp = x & twoToThe[i];
		if(temp = 0){
			return false;
		}
		return true;
	}

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0){ return -x;}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum,count,shiftedX;
		let sum = 0;
		let count = 0;
		let shiftedX = x;
		while (count < 16) {
			if(Math.bit(y,count)){
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let count = count + 1;
		}
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) { 
		if(((x<0)&(y>0))|((x>0)&(y<0))){
			return -Math.divideHelper(Math.abs(x),Math.abs(y));
		}
		return Math.divideHelper(Math.abs(x),Math.abs(y));
    }

	function int divideHelper(int x, int y){
		var int q;
		if(~(y > 0)){ return 0; }
		if(y > x){ return 0; }
		let q = Math.divideHelper(x, y * 2);
		if((x - (2*y*q)) < y){ return 2*q; }
		return 2*q+1;
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y,count,temp,temp2;
		let y = 0;
		let count = 7;
		while(count > -1){
			let temp = y + twoToThe[count];
			let temp2 = temp * temp;
			if(~(temp2 > x)&(temp2 > 0)){
				let y = temp;
			}
			let count = count - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if(a > b){return a;}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a > b){return b;}
		return a;
    }
}
