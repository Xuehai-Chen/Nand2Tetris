// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram;
	static Array heap;
    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048;
		let heap[0] = 0;
		let heap[1] = 14335;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int next,length,address,block;
		let next = heap[0];
		let length = heap[1];
		let address = heap;
		while(length < (size + 1)){
			let address = next;
			let next = ram[next];
			let length = ram[next+1];
		}
		let block = address + ram[address+1] - size + 1;
		let ram[address+1] = ram[address+1] - (size + 2);
		let ram[block-1] = size;
		let ram[block-2] = 0;
		return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var int next;
		let next = heap[0];
		while((~(ram[next]=0))&(~(next=0))){
			let next = ram[next];
		}
		if(next = 0){
			let heap[0] = o - 2;
		}else{
			let ram[next] = o - 2;
		}
		return;
    }    
}
